generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  CUSTOMER
}

enum OrderStatus {
  CREATED
  PENDING
  SENT
  REJECTED
  CANCELED
  COMPELETED
}

enum PaymentStatus {
  NOT_PAYED
  FULLY_PAYED
  PARTIALLY_PAYED
}

model Address {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  state      String
  city       String
  postalCode Int
  address    String
  User       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  title     String
  body      String
  score     Int
  upVotes   Int      @default(0)
  downVotes Int      @default(0)
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  Item      Item     @relation(fields: [itemId], references: [id])
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id               String     @id @default(cuid())
  name             String     @unique
  price            Float
  sold             Int        @default(0)
  viewed           Int        @default(0)
  images           String[]
  currentInventory Int        @default(0)
  description      String
  published        Boolean    @default(false)
  brand            Brand      @relation(fields: [brandId], references: [id])
  brandId          String
  categories       Category[]
  orders           Order[]
  reviews          Review[]
  specifications   Json?
  reviewsScore     Float      @default(0.0)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id              String        @id @default(cuid())
  expectedPayment Float
  actualPayment   Float
  transactionId   String?
  paymentStatus   PaymentStatus @default(NOT_PAYED)
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Order {
  id           String      @id @default(cuid())
  status       OrderStatus @default(CREATED)
  items        Item[]
  total        Float
  specialNotes String?
  invoice      Invoice?
  isFulfilled  Boolean     @default(false)
  User         User        @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model User {
  id           String    @id @default(cuid())
  displayName  String?
  email        String    @unique
  phoneNumber  Int?
  password     String
  authToken    String?
  authTokenExp DateTime?
  role         Role      @default(CUSTOMER)
  orders       Order[]
  addresses    Address[]
  reviews      Review[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
