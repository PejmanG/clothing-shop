generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  CUSTOMER
}

// enum OrderStatus {
//   CREATED
//   PENDING
//   SENT
//   REJECTED
//   CANCELED
//   COMPELETED
// }

// enum PaymentStatus {
//   NOT_PAYED
//   FULLY_PAYED
//   PARTIALLY_PAYED
// }

// model Address {
//   id         String   @id @default(cuid())
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   state      String
//   city       String
//   postalCode Int
//   address    String
//   User       User     @relation(fields: [userId], references: [id])
//   userId     String
// }

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  title     String
  body      String
  rating    Int
  votes     Int      @default(0)
  published Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Item      Item     @relation(fields: [itemId], references: [id])
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TODO - Later on add a reply system

// model Image {
//   id       String  @id @default(cuid())
//   imageSrc String
//   imageAlt String?

//   Item   Item?   @relation(fields: [itemId], references: [id])
//   itemId String?
// }

// model ItemSize {
//   id               String   @id @default(cuid())
//   name             String
//   colors           String[]
//   currentInventory Int
//   Item             Item?    @relation(fields: [itemId], references: [id])
//   itemId           String?
// }

model Item {
  id                 String     @id @default(cuid())
  name               String     @unique
  price              Float
  dsicountedPrice    Float?
  offer              Boolean    @default(false)
  // featured         Boolean    @default(false) //TODO - later on make another model for featured items; these items will be shown on image sliders or item card sliders
  sold               Int        @default(0)
  viewed             Int        @default(0)
  // images          Image[]
  images             String[]
  // sizes           ItemSize[]
  currentInventory   Int        @default(0)
  description        String
  // published        Boolean    @default(true)
  brand              Brand      @relation(fields: [brandId], references: [id])
  brandId            String
  categories         Category[]
  reviews            Review[]
  reviewsCount       Int        @default(0)
  reviewsAvgRating   Float      @default(0.0)
  reviewsRated1Count Float      @default(0)
  reviewsRated2Count Float      @default(0)
  reviewsRated3Count Float      @default(0)
  reviewsRated4Count Float      @default(0)
  reviewsRated5Count Float      @default(0)
  // specifications   Json?
  details            String[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Invoice {
//   id              String        @id @default(cuid())
//   expectedPayment Float
//   actualPayment   Float
//   transactionId   String?
//   paymentStatus   PaymentStatus @default(NOT_PAYED)
//   order           Order         @relation(fields: [orderId], references: [id])
//   orderId         String        @unique
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
// }

// model Order {
//   id           String      @id @default(cuid())
//   status       OrderStatus @default(CREATED)
//   cart         Json[]
//   total        Float
//   specialNotes String?
//   invoice      Invoice?
//   isFulfilled  Boolean     @default(false)
//   User         User        @relation(fields: [userId], references: [id])
//   userId       String
//   createdAt    DateTime    @default(now())
//   updatedAt    DateTime    @updatedAt
// }

model Cart {
  id              String @id @default(cuid())
  items           String
  count           Int
  total           Float
  discountedTotal Float
  User            User?
}

model User {
  id          String   @id @default(cuid())
  displayName String?
  email       String   @unique
  phoneNumber Int?
  password    String
  role        Role     @default(CUSTOMER)
  // orders      Order[]
  // addresses   Address[]
  reviews     Review[]
  cart        Cart?    @relation(fields: [cartId], references: [id])
  cartId      String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//TODO - wishlist
